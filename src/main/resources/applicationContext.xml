<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- id属性 名字（唯一标识）
    class属性 配置的全限定名 -->
    <bean id="person" class="com.spring5.basic.Person"/>
    <!-- name属性 别名 可以有多个，用逗号隔开  id相当于人的大名，name相当于人的小名字 -->
    <bean id="person1" name="p,p1" class="com.spring5.basic.Person"/>
    <!-- 只有class 属性也是可以的，spring会自己默认设置一个id属性 -->
    <bean class="com.spring5.basic.User"/>
    <!-- 测试私有换构造方法的类也可以被创建，因为底层用的是反射 -->
    <bean id="user" class="com.spring5.basic.User"/>
    <!-- 测试spring工厂set注入 -->
    <bean id="person2" class="com.spring5.basic.Person">
        <!-- jdk的八种基本类型 -->
        <!--        <property name="id">-->
        <!--            <value>123</value>-->
        <!--        </property>-->
        <!-- jdk的八种基本类型的简化写法 -->
        <property name="id" value="123"/>
        <!-- jdk的八种基本类型 -->
        <!--        <property name="name">-->
        <!--            <value>李四</value>-->
        <!--        </property>-->
        <!-- jdk的八种基本类型的简化写法 -->
        <property name="name" value="李四"/>
        <!-- 数组类型赋值 -->
        <property name="emails">
            <list>
                <value>zhangsan@11111</value>
                <value>lisi@11111</value>
                <value>wangwu@11111</value>
            </list>
        </property>
        <!-- Set集合 -->
        <property name="tels">
            <set>
                <value>123456</value>
                <value>123456</value>
                <value>123455678</value>
            </set>
        </property>
        <!-- List集合 -->
        <property name="addresses">
            <list>
                <value>1234daskf</value>
                <value>1234daskf</value>
                <value>1234das123n12</value>
            </list>
        </property>
        <!-- Map集合 -->
        <property name="qqs">
            <map>
                <entry>
                    <key>
                        <value>zhangsan</value>
                    </key>
                    <value>9876823392</value>
                </entry>
                <entry>
                    <key>
                        <value>lisi</value>
                    </key>
                    <value>3455902020</value>
                </entry>
                <entry key="wangwu">
                    <value>1987687203</value>
                </entry>
            </map>
        </property>
        <!-- Properties类型 -->
        <property name="p">
            <props>
                <prop key="k1">v1</prop>
                <prop key="k2">v2</prop>
                <prop key="k3">v3</prop>
            </props>
        </property>
    </bean>
    <!-- 测试spring工厂的简化写法：基于p命名空间的简化,对于基本类型 -->
    <bean id="person3" class="com.spring5.basic.Person" p:name="zhangsan" p:id="12345678"/>

    <!-- 测试spring工厂的 用户自定义的成员变量 的set注入 第一种方式 -->
    <bean id="userService" class="com.spring5.basic.UserServiceImpl">
        <property name="userDAO">
            <bean class="com.spring5.basic.UserDAOImpl"></bean>
        </property>
    </bean>

    <!-- 测试spring工厂的 用户自定义的成员变量 的set注入 第二种方式 -->
    <bean id="userDAO" class="com.spring5.basic.UserDAOImpl"/>
    <bean id="userService2" class="com.spring5.basic.UserServiceImpl">
        <property name="userDAO">
            <ref bean="userDAO"/>
        </property>
    </bean>
    <!-- 测试spring工厂的 用户自定义的成员变量 的set注入 第二种方式。简化写法：基于属性的简化 -->
    <bean id="userService3" class="com.spring5.basic.UserServiceImpl">
        <property name="userDAO" ref="userDAO"/>
    </bean>
    <!-- 测试spring工厂的 用户自定义的成员变量 的set注入 第二种方式。简化写法：基于p命名空间的简化 -->
    <bean id="userService4" class="com.spring5.basic.UserServiceImpl" p:userDAO-ref="userDAO"/>

    <!-- 构造方法注入 -->
    <bean id="customer" class="com.spring5.basic.constructer.Customer">
        <!-- <constructor-arg>标签的个数与构造函数的参数个数一样，顺序一样 -->
        <constructor-arg>
            <value>zhangsan</value>
        </constructor-arg>
        <constructor-arg>
            <value>103</value>
        </constructor-arg>
    </bean>
    <!-- 构造方法注入：当构造方法发生重载的时候，通过标签<constructor-arg>的个数来区分 -->
    <bean id="customer1" class="com.spring5.basic.constructer.Customer">
        <!-- <constructor-arg>标签的个数与构造函数的参数个数一样，顺序一样 -->
        <constructor-arg>
            <value>zhangsan</value>
        </constructor-arg>
    </bean>
    <!-- 构造方法注入：当构造方法发生重载的时候，且标签<constructor-arg>的个数相同时，在标签中添加 type属性  -->
    <bean id="customer2" class="com.spring5.basic.constructer.Customer">
        <!-- <constructor-arg>标签的个数与构造函数的参数个数一样，顺序一样 -->
        <constructor-arg type="java.lang.Integer">
            <value>32</value>
        </constructor-arg>
    </bean>
    <!-- 构造方法注入：当构造方法发生重载的时候，且标签<constructor-arg>的个数相同时，在标签中添加 type属性  -->
    <bean id="customer3" class="com.spring5.basic.constructer.Customer">
        <!-- <constructor-arg>标签的个数与构造函数的参数个数一样，顺序一样 -->
        <constructor-arg type="java.lang.String">
            <value>2432552rr2</value>
        </constructor-arg>
    </bean>

    <!-- 复杂对象的bean：class中指定的类型 是FactoryBean接口的实现类(ConnectionFactoryBean)，
    那么通过id值获取的是这个类(ConnectionFactoryBean)所创建的复杂对象 Connection -->
    <bean id="conn" class="com.spring5.factorybean.ConnectionFactoryBean"/>

    <!-- 复杂对象的bean：class中指定的类型 是FactoryBean接口的实现类(ConnectionFactoryBean)，
    那么通过id值获取的是这个类(ConnectionFactoryBean)所创建的复杂对象 Connection

    深入理解依赖注入，我们在上面的bean中是将数据库的连接信息写在代码中，说明我们需要依赖这个连接信息，那我们就可以通过
    依赖注入的方式来将这些信息放在配置文件中，来通过spring的set注入的方式来注入
    -->
    <bean id="conn1" class="com.spring5.factorybean.ConnectionFactoryBean1">
        <property name="driver" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/ecoai?useSSL=false"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>

    <!-- 实例工厂 创建复杂对象
        先创建实例对象， 在引用方法
    -->
    <bean id="connectionFactory" class="com.spring5.factorybean.ConnectionFactory"/>
    <bean id="conn2" factory-bean="connectionFactory" factory-method="getConnection"/>

    <!-- 静态工厂  创建复杂对象
    直接创建对象，在对象中引用静态方法
    -->
    <bean id="staticConnectionFactory" class="com.spring5.factorybean.StaticConnectionFactory"
          factory-method="getConnection"/>

    <!-- 简单对象的创建次数控制 scope ="singleton" 只创建一次 ,若是不写scope，默认是singleton.
    scope="prototype" 每一次都创建 -->
    <bean id="account1" scope="singleton" class="com.spring5.scope.Account"/>
    <bean id="account2" scope="prototype" class="com.spring5.scope.Account"/>

    <!-- Spring的生命周期 -->
    <!-- Spring生命周期中的对象的创建：当scope="singleton" 时，Spring工厂被创建的时候，对象就被创建了,
    默认的scope就是singleton-->
    <bean id="product1" scope="singleton" class="com.spring5.life.Product"/>
    <!-- Spring生命周期中的对象的创建：当scope="prototype" 时，获取对象的是后才创建对象-->
    <bean id="product2" scope="prototype" class="com.spring5.life.Product2"/>
    <!-- Spring生命周期中的对象的创建：当scope="singleton" 时，我们还想让对象的创建在 获取对象的时候创建对象，
    则需要在配置文件中添加 lazy-init="true",该属性默认是false-->
    <bean id="product3" scope="singleton" class="com.spring5.life.Product" lazy-init="true"/>
    <!-- spring 生命周期中的初始化是在对象创建之后 -->
    <!-- spring 生命周期中的初始化: 注意2点：1.我们开发人员提供初始化方法，2.Spring调用初始化方法 -->
    <!-- spring 生命周期中的初始化:第一种方式：实现Spring提供的InitializingBean接口,实现afterPropertiesSet()方法-->
    <bean id="produce4" class="com.spring5.life.Product"/>
    <!-- spring 生命周期中的初始化:第二种方式：直接写一个初始化方法：public void myInit(){}
    然后在bean中添加 init-method="myInit"-->
    <bean id="produce5" class="com.spring5.life.Product2" init-method="myInit"/>
    <!-- 初始化操作的细节化分析:
    1.同时实现了InitializingBean的初始化方法 和 自己的初始化方法myInit的执行顺序:
    (1). InitializingBean的afterPropertiesSet
    (2). 普通初始化⽅法
    2.当类中有注入操作的时候，注入操作与初始化的执行顺序：
    先执行注入操作，在执行初始化
     -->
    <bean id="produce6" class="com.spring5.life.Product" init-method="myInit">
        <property name="name" value="zhangsan"/>
    </bean>
    <!-- 生命周期的对象的销毁：注意2点：1.在关闭spring工厂的时候，ctx.close()销毁对象。2.Spring调用销毁方法
    这两点跟初始化的时候需要注意的相同。
    需要注意的细节与初始化类似，先后顺序是 先Spring提供的接口DisposableBean的方法destroy() 后自己定义的销毁方法 myDestroy()
    -->
    <bean id="produce7" class="com.spring5.life.Product" init-method="myInit" destroy-method="myDestroy">
        <property name="name" value="lisi"/>
    </bean>

</beans>
